# Copyright (c) The dgc.network
# SPDX-License-Identifier: Apache-2.0

version: "2.1"

volumes:
  dgc-platform-shared:

services:
  tnt-contract-builder:
    logging:
      driver: none
    image: tnt-contract-builder
    container_name: tnt-contract-builder
    build:
      context: ..
      dockerfile: contracts/track_and_trace/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - dgc-platform-shared:/dgc-platform-shared
    entrypoint: |
      bash -c "
        while true; do curl -s http://sawtooth-rest-api:8008/state | grep -q head; if [ $$? -eq 0 ]; then break; fi; sleep 0.5; done;
        sabre cr --create dgc_platform_track_and_trace --key /dgc-platform-shared/my_key --owner $$(cat /dgc-platform-shared/my_key.pub) --url http://sawtooth-rest-api:8008 --wait 30
        sabre upload --filename /tmp/track_and_trace.yaml --key /dgc-platform-shared/my_key --url http://sawtooth-rest-api:8008 --wait 30
        sabre ns --create a43b46 --key /dgc-platform-shared/my_key --owner $$(cat /dgc-platform-shared/my_key.pub) --url http://sawtooth-rest-api:8008 --wait 30
        sabre perm a43b46 dgc_platform_track_and_trace --key /dgc-platform-shared/my_key --read --write --url http://sawtooth-rest-api:8008 --wait 30
        sabre perm 621dee01 dgc_platform_track_and_trace --key /dgc-platform-shared/my_key --read --write --url http://sawtooth-rest-api:8008 --wait 30
        sabre perm cad11d dgc_platform_track_and_trace --key /dgc-platform-shared/my_key --read --url http://sawtooth-rest-api:8008 --wait 30
        echo '---------========= track and trace contract is loaded =========---------'
        tail -f /dev/null
      "

  schema-contract-builder:
    logging:
      driver: none
    image: schema-contract-builder
    container_name: schema-contract-builder
    build:
      context: ..
      dockerfile: contracts/schema/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - dgc-platform-shared:/dgc-platform-shared
    entrypoint: |
      bash -c "
        while true; do curl -s http://sawtooth-rest-api:8008/state | grep -q head; if [ $$? -eq 0 ]; then break; fi; sleep 0.5; done;
        sabre cr --create dgc_platform_schema --key /dgc-platform-shared/my_key --owner $$(cat /dgc-platform-shared/my_key.pub) --url http://sawtooth-rest-api:8008 --wait 30
        sabre upload --filename /tmp/schema.yaml --key /dgc-platform-shared/my_key --url http://sawtooth-rest-api:8008 --wait 30
        sabre ns --create 621dee01 --key /dgc-platform-shared/my_key --owner $$(cat /dgc-platform-shared/my_key.pub) --url http://sawtooth-rest-api:8008 --wait 30
        sabre perm 621dee01 dgc_platform_schema --key /dgc-platform-shared/my_key --read --write --url http://sawtooth-rest-api:8008 --wait 30
        sabre perm cad11d dgc_platform_schema --key /dgc-platform-shared/my_key --read --url http://sawtooth-rest-api:8008 --wait 30
        echo '---------========= dgc-platform schema contract is loaded =========---------'
        tail -f /dev/null
      "

  pike-contract-builder:
    logging:
      driver: none
    image: pike-contract-builder
    container_name: pike-contract-builder
    build:
      context: ..
      dockerfile: contracts/pike/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - dgc-platform-shared:/dgc-platform-shared
    entrypoint: |
      bash -c "
        while true; do curl -s http://sawtooth-rest-api:8008/state | grep -q head; if [ $$? -eq 0 ]; then break; fi; sleep 0.5; done;
        sabre cr --create pike --key /dgc-platform-shared/my_key --owner $$(cat /dgc-platform-shared/my_key.pub) --url http://sawtooth-rest-api:8008 --wait 30
        sabre upload --filename /tmp/pike.yaml --key /dgc-platform-shared/my_key --url http://sawtooth-rest-api:8008 --wait 30
        sabre ns --create cad11d --key /dgc-platform-shared/my_key --owner $$(cat /dgc-platform-shared/my_key.pub) --url http://sawtooth-rest-api:8008 --wait 30
        sabre perm cad11d pike --key /dgc-platform-shared/my_key --read --write --url http://sawtooth-rest-api:8008 --wait 30
        echo '---------========= pike contract is loaded =========---------'
        tail -f /dev/null
      "

  product-contract-builder:
    logging:
      driver: none
    image: product-contract-builder
    container_name: product-contract-builder
    build:
      context: ..
      dockerfile: contracts/product/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - dgc-platform-shared:/dgc-platform-shared
    entrypoint: |
      bash -c "
        while true; do curl -s http://sawtooth-rest-api:8008/state | grep -q head; if [ $$? -eq 0 ]; then break; fi; sleep 0.5; done;
        sabre cr --create dgc_platform_product --key /dgc-platform-shared/my_key --owner $$(cat /dgc-platform-shared/my_key.pub) --url http://sawtooth-rest-api:8008 --wait 30
        sabre upload --filename /tmp/product.yaml --key /dgc-platform-shared/my_key --url http://sawtooth-rest-api:8008 --wait 30
        sabre ns --create cad11d --key /dgc-platform-shared/my_key --owner $$(cat /dgc-platform-shared/my_key.pub) --url http://sawtooth-rest-api:8008 --wait 30
        sabre ns --create 621dee01 --key /dgc-platform-shared/my_key --owner $$(cat /dgc-platform-shared/my_key.pub) --url http://sawtooth-rest-api:8008 --wait 30
        sabre ns --create 621dee02 --key /dgc-platform-shared/my_key --owner $$(cat /dgc-platform-shared/my_key.pub) --url http://sawtooth-rest-api:8008 --wait 30
        sabre perm cad11d dgc_platform_product --key /dgc-platform-shared/my_key --read --write --url http://sawtooth-rest-api:8008 --wait 30
        sabre perm 621dee01 dgc_platform_product --key /dgc-platform-shared/my_key --read --url http://sawtooth-rest-api:8008 --wait 30
        sabre perm 621dee02 dgc_platform_product --key /dgc-platform-shared/my_key --read --write --url http://sawtooth-rest-api:8008 --wait 30
        echo '---------========= dgc_platform_product contract is loaded =========---------'
        tail -f /dev/null
      "

  validator:
    logging:
      driver: none
    image: hyperledger/sawtooth-validator:1.1
    container_name: sawtooth-validator
    expose:
      - 4004
    ports:
      - "4020:4004"
    volumes:
      - dgc-platform-shared:/dgc-platform-shared
    # start the validator with an empty genesis batch
    entrypoint: |
      bash -c "
        if [ ! -f /etc/sawtooth/keys/validator.priv ]; then
          sawadm keygen &&
          sawtooth keygen my_key &&
          cp /root/.sawtooth/keys/my_key.* /dgc-platform-shared &&
          sawset genesis -k /root/.sawtooth/keys/my_key.priv &&
          sawset proposal create \
            -k /root/.sawtooth/keys/my_key.priv \
            sawtooth.consensus.algorithm.name=Devmode \
            sawtooth.consensus.algorithm.version=0.1 \
            -o config.batch &&
          sawset proposal create \
            -k /root/.sawtooth/keys/my_key.priv \
            sawtooth.swa.administrators=$$(cat /dgc-platform-shared/my_key.pub) \
            -o sabre-admin.batch
          sawadm genesis config-genesis.batch config.batch sabre-admin.batch
        fi;
        sawtooth-validator -vv \
          --endpoint tcp://validator:8800 \
          --bind component:tcp://eth0:4004 \
          --bind network:tcp://eth0:8800 \
          --bind consensus:tcp://eth0:5050
      "

  devmode-engine:
    logging:
      driver: none
    image: hyperledger/sawtooth-devmode-engine-rust:1.1
    container_name: sawtooth-devmode-engine-rust-default
    depends_on:
      - validator
    entrypoint: devmode-engine-rust -C tcp://validator:5050

  settings-tp:
    logging:
      driver: none
    image: hyperledger/sawtooth-settings-tp:1.1
    container_name: sawtooth-settings-tp
    depends_on:
      - validator
    entrypoint: settings-tp -vv -C tcp://validator:4004

  rest-api:
    logging:
      driver: none
    image: hyperledger/sawtooth-rest-api:1.1
    container_name: sawtooth-rest-api
    expose:
      - 8008
    ports:
      - "8024:8008"
    depends_on:
      - validator
    entrypoint: |
      sawtooth-rest-api -vv
        --connect tcp://validator:4004
        --bind rest-api:8008

  dgc-platform-daemon:
    container_name: dgc-platform-daemon
    image: dgc-platform-daemon-integration:${ISOLATION_ID}
    build:
      context: ..
      dockerfile: docker/tests
    environment:
      INTEGRATION_TEST_URL: http://dgc-platform-daemon:8080
    expose:
      - 8080
    volumes:
      - ..:/project/dgc-platform
    entrypoint: |
      bash -c "
        cargo build -p dgc-platform-daemon  && \
        cargo build -p dgc-platform-cli  && \
        # we need to wait for the db to have started.
        until PGPASSWORD=grid_example psql -h db -U dgc-platform -c '\q'; do
            >&2 echo \"Database is unavailable - sleeping\"
            sleep 1
        done
        cp /project/dgc-platform/target/debug/dgc-platform-daemon /usr/sbin/dgc-platform-daemon && \
        cp /project/dgc-platform/target/debug/dgc-platform /usr/bin/dgc-platform && \
        dgc-platform database migrate \
            --database-url postgres://dgc-platform:grid_example@db/dgc-platform && \
        dgc-platform-daemon -b dgc-platform-daemon:8080 -C tcp://validator:4004 \
            --database-url postgres://dgc-platform:grid_example@db/dgc-platform &
        cd cli
        while true; do curl -s http://dgc-platform-daemon:8080; if [ $$? -eq 0 ]; then break; fi; sleep 0.5; done;
        cargo test integration -- --nocapture --test-threads=1
      "

  dgc-platform-cli:
    logging:
      driver: none
    image: dgc-platform-cli:${ISOLATION_ID}
    container_name: dgc-platform-cli
    build:
      context: ..
      dockerfile: cli/Dockerfile
      args:
        - CARGO_ARGS=${CARGO_ARGS}
        - REPO_VERSION=${REPO_VERSION}
    entrypoint: |
      tail -f /dev/null

  sabre-tp:
    logging:
      driver: none
    image: hyperledger/sawtooth-sabre-tp:latest
    container_name: sawtooth-sabre-tp
    depends_on:
      - validator
    entrypoint: sawtooth-sabre -vv --connect tcp://validator:4004

  sawtooth-shell:
    logging:
      driver: none
    image: hyperledger/sawtooth-shell:1.1
    container_name: sawtooth-shell
    command: |
      bash -c "
        sawtooth keygen &&
        tail -f /dev/null
      "
  db:
    logging:
      driver: none
    image: postgres
    restart: always
    expose:
      - 5432
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: dgc-platform
      POSTGRES_PASSWORD: grid_example
      POSTGRES_DB: dgc-platform
