# Copyright (c) The dgc.network
# SPDX-License-Identifier: Apache-2.0

version: '3.6'

volumes:
  contracts-shared:
  key-registry:
  gridd-alpha:
  gridd-beta:
  gridd-gamma:

services:

# ---== shared services ==---

  pike-contract-builder:
    image: pike-contract-builder
    container_name: pike-contract-builder
    build:
      context: ../..
      dockerfile: contracts/pike/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/dgc-platform-pike*.scar /usr/share/scar
      "

  product-contract-builder:
    image: product-contract-builder
    container_name: product-contract-builder
    build:
      context: ../..
      dockerfile: contracts/product/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/dgc-platform-product*.scar /usr/share/scar
      "

  schema-contract-builder:
    image: schema-contract-builder
    container_name: schema-contract-builder
    build:
      context: ../..
      dockerfile: contracts/schema/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/dgc-platform-schema*.scar /usr/share/scar
      "

  tnt-contract-builder:
    image: tnt-contract-builder
    container_name: tnt-contract-builder
    build:
      context: ../..
      dockerfile: contracts/track_and_trace/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/dgc-platform-track-and-trace*.scar /usr/share/scar
      "

  generate-key-registry:
    image: splintercommunity/splinter-cli:master
    volumes:
      - key-registry:/key_registry
      - ./configs:/input
    command: |
      bash -c "
        if [ ! -f /key_registry/keys.yaml ]
        then
          splinter admin keyregistry \
            -i /input/key_registry_spec.yaml \
            -d /key_registry \
            --force
        fi
      "


# ---== alpha node ==---

  db-alpha:
    image: postgres
    container_name: db-alpha
    hostname: db-alpha
    restart: always
    expose:
      - 5432
    environment:
      POSTGRES_USER: dgc-platform
      POSTGRES_PASSWORD: grid_example
      POSTGRES_DB: dgc-platform

  gridd-alpha:
    image: gridd
    container_name: gridd-alpha
    hostname: gridd-alpha
    build:
      context: ../..
      dockerfile: daemon/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
        - CARGO_ARGS=-- --features experimental
    volumes:
      - contracts-shared:/usr/share/scar
      - gridd-alpha:/etc/dgc-platform/keys
    expose:
      - 8080
    ports:
      - "8080:8080"
    environment:
      GRID_DAEMON_KEY: "alpha-agent"
      GRID_DAEMON_ENDPOINT: "http://gridd-alpha:8080"
    entrypoint: |
        bash -c "
          # we need to wait for the db to have started.
          until PGPASSWORD=grid_example psql -h db-alpha -U dgc-platform -c '\q' > /dev/null 2>&1; do
              >&2 echo \"Database is unavailable - sleeping\"
              sleep 1
          done
          dgc-platform -vv admin keygen --skip && \
          dgc-platform -vv database migrate \
              --database-url postgres://dgc-platform:grid_example@db-alpha/dgc-platform &&
          gridd -vv -b 0.0.0.0:8080 -C splinter:http://splinterd-alpha:8085 \
              --database-url postgres://dgc-platform:grid_example@db-alpha/dgc-platform
        "

  scabbard-cli-alpha:
    image: splintercommunity/scabbard-cli:experimental
    container_name: scabbard-cli-alpha
    hostname: scabbard-cli-alpha
    volumes:
      - gridd-alpha:/root/.splinter/keys

  splinterd-alpha:
    image: splintercommunity/splinterd:experimental
    container_name: splinterd-alpha
    hostname: splinterd-alpha
    expose:
      - 8044
    ports:
      - "8044:8044"
      - "8085:8085"
    volumes:
      - contracts-shared:/usr/share/scar
      - key-registry:/key_registry_shared
      - ./configs:/configs
    entrypoint: |
      bash -c "
        while [ ! -f /key_registry_shared/keys.yaml ]; do \
          echo 'waiting for key registry'; \
          sleep 1; \
        done && \
        until PGPASSWORD=admin psql -h splinter-db-alpha -U admin -d splinter -c '\q'; do
          >&2 echo \"Database is unavailable - sleeping\"
          sleep 1
        done
        cp /key_registry_shared/keys.yaml /var/lib/splinter && \
        if [ ! -f /etc/splinter/certs/private/server.key ]
        then
          splinter-cli cert generate --force
        fi && \
        splinter database migrate -C postgres://admin:admin@splinter-db-alpha:5432/splinter && \
        splinterd -vv \
        --registry file:///configs/nodes.yaml \
        --bind 0.0.0.0:8085 \
        --network-endpoint 0.0.0.0:8044 \
        --node-id alpha-node-000 \
        --service-endpoint 0.0.0.0:8043 \
        --storage yaml \
        --client-cert /etc/splinter/certs/client.crt \
        --client-key /etc/splinter/certs/private/client.key \
        --server-cert /etc/splinter/certs/server.crt \
        --server-key /etc/splinter/certs/private/server.key \
        --enable-biome \
        --database postgres://admin:admin@splinter-db-alpha:5432/splinter \
        --insecure
      "

  splinter-db-alpha:
    image: postgres
    container_name: splinter-db-alpha
    restart: always
    expose:
      - 5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: splinter

  dgc-platform-ui-alpha:
    build:
      context: ../../dgc-platform-ui
      args:
        REPO_VERSION: ${REPO_VERSION}
        REACT_APP_SPLINTER_URL: '/splinterd'
        REACT_APP_SAPLING_URL: '/sapling-dev-server'
        REACT_APP_GRID_URL: '/gridd'
        SPLINTER_URL: 'http://splinterd-alpha:8085'
        SAPLING_URL: ' http://sapling-dev-server-alpha:80'
        GRID_URL: 'http://gridd-alpha:8080'
    image: dgc-platform-ui-alpha
    container_name: dgc-platform-ui-alpha
    expose:
      - 80
    ports:
      - '3030:80'

  sapling-dev-server-alpha:
    build:
      context: ../../dgc-platform-ui
      dockerfile: sapling-dev-server/Dockerfile
    container_name: sapling-dev-server-alpha
    expose:
      - 80

# ---== beta node ==---

  db-beta:
    image: postgres
    container_name: db-beta
    hostname: db-beta
    restart: always
    expose:
      - 5432
    environment:
      POSTGRES_USER: dgc-platform
      POSTGRES_PASSWORD: grid_example
      POSTGRES_DB: dgc-platform

  gridd-beta:
    image: gridd
    container_name: gridd-beta
    hostname: gridd-beta
    build:
      context: ../..
      dockerfile: daemon/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
        - CARGO_ARGS=-- --features experimental
    volumes:
      - contracts-shared:/usr/share/scar
      - gridd-beta:/etc/dgc-platform/keys
    expose:
      - 8080
    ports:
      - "8081:8080"
    environment:
      GRID_DAEMON_KEY: "beta-agent"
      GRID_DAEMON_ENDPOINT: "http://gridd-beta:8080"
    entrypoint: |
        bash -c "
          # we need to wait for the db to have started.
          until PGPASSWORD=grid_example psql -h db-beta -U dgc-platform -c '\q' > /dev/null 2>&1; do
              >&2 echo \"Database is unavailable - sleeping\"
              sleep 1
          done
          dgc-platform -vv admin keygen --skip && \
          dgc-platform -vv database migrate \
              --database-url postgres://dgc-platform:grid_example@db-beta/dgc-platform &&
          gridd -vv -b 0.0.0.0:8080 -C splinter:http://splinterd-beta:8085 \
              --database-url postgres://dgc-platform:grid_example@db-beta/dgc-platform
        "

  scabbard-cli-beta:
    image: splintercommunity/scabbard-cli:experimental
    container_name: scabbard-cli-beta
    hostname: scabbard-cli-beta
    volumes:
      - gridd-beta:/root/.splinter/keys

  splinterd-beta:
    image: splintercommunity/splinterd:experimental
    container_name: splinterd-beta
    hostname: splinterd-beta
    expose:
      - 8044
    ports:
      - "8045:8044"
    volumes:
      - contracts-shared:/usr/share/scar
      - key-registry:/key_registry_shared
      - ./configs:/configs
    entrypoint: |
      bash -c "
        while [ ! -f /key_registry_shared/keys.yaml ]; do \
          echo 'waiting for key registry'; \
          sleep 1; \
        done && \
        until PGPASSWORD=admin psql -h splinter-db-beta -U admin -d splinter -c '\q'; do
          >&2 echo \"Database is unavailable - sleeping\"
          sleep 1
        done
        cp /key_registry_shared/keys.yaml /var/lib/splinter && \
        if [ ! -f /etc/splinter/certs/private/server.key ]
        then
          splinter-cli cert generate --force
        fi && \
        splinter database migrate -C postgres://admin:admin@splinter-db-beta:5432/splinter && \
        splinterd -vv \
        --registry file:///configs/nodes.yaml \
        --bind 0.0.0.0:8085 \
        --network-endpoint 0.0.0.0:8044 \
        --node-id beta-node-000 \
        --service-endpoint 0.0.0.0:8043 \
        --storage yaml \
        --client-cert /etc/splinter/certs/client.crt \
        --client-key /etc/splinter/certs/private/client.key \
        --server-cert /etc/splinter/certs/server.crt \
        --server-key /etc/splinter/certs/private/server.key \
        --enable-biome \
        --database postgres://admin:admin@splinter-db-beta:5432/splinter \
        --insecure
      "

  splinter-db-beta:
    image: postgres
    container_name: splinter-db-beta
    restart: always
    expose:
      - 5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: splinter

  dgc-platform-ui-beta:
    build:
      context: ../../dgc-platform-ui
      args:
        REPO_VERSION: ${REPO_VERSION}
        REACT_APP_SPLINTER_URL: '/splinterd'
        REACT_APP_SAPLING_URL: '/sapling-dev-server'
        REACT_APP_GRID_URL: '/gridd'
        SPLINTER_URL: 'http://splinterd-beta:8085'
        SAPLING_URL: ' http://sapling-dev-server-beta:80'
        GRID_URL: 'http://gridd-beta:8080'
    image: dgc-platform-ui-beta
    container_name: dgc-platform-ui-beta
    expose:
      - 80
    ports:
      - '3031:80'

  sapling-dev-server-beta:
    build:
      context: ../../dgc-platform-ui
      dockerfile: sapling-dev-server/Dockerfile
    container_name: sapling-dev-server-beta
    expose:
      - 80

# ---== gamma node ==---

  db-gamma:
    image: postgres
    container_name: db-gamma
    hostname: db-gamma
    restart: always
    expose:
      - 5432
    environment:
      POSTGRES_USER: dgc-platform
      POSTGRES_PASSWORD: grid_example
      POSTGRES_DB: dgc-platform

  gridd-gamma:
    image: gridd
    container_name: gridd-gamma
    hostname: gridd-gamma
    build:
      context: ../..
      dockerfile: daemon/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
        - CARGO_ARGS=-- --features experimental
    volumes:
      - contracts-shared:/usr/share/scar
      - gridd-gamma:/etc/dgc-platform/keys
    expose:
      - 8080
    ports:
      - "8082:8080"
    environment:
      GRID_DAEMON_KEY: "gamma-agent"
      GRID_DAEMON_ENDPOINT: "http://gridd-gamma:8080"
    entrypoint: |
        bash -c "
          # we need to wait for the db to have started.
          until PGPASSWORD=grid_example psql -h db-gamma -U dgc-platform -c '\q' > /dev/null 2>&1; do
              >&2 echo \"Database is unavailable - sleeping\"
              sleep 1
          done
          dgc-platform -vv admin keygen --skip && \
          dgc-platform -vv database migrate \
              --database-url postgres://dgc-platform:grid_example@db-gamma/dgc-platform &&
          gridd -vv -b 0.0.0.0:8080 -C splinter:http://splinterd-gamma:8085 \
              --database-url postgres://dgc-platform:grid_example@db-gamma/dgc-platform
        "

  splinterd-gamma:
    image: splintercommunity/splinterd:experimental
    container_name: splinterd-gamma
    hostname: splinterd-gamma
    expose:
      - 8044
    ports:
      - "8046:8044"
    volumes:
      - contracts-shared:/usr/share/scar
      - key-registry:/key_registry_shared
      - ./configs:/configs
    entrypoint: |
      bash -c "
        while [ ! -f /key_registry_shared/keys.yaml ]; do \
          echo 'waiting for key registry'; \
          sleep 1; \
        done && \
        until PGPASSWORD=admin psql -h splinter-db-gamma -U admin -d splinter -c '\q'; do
          >&2 echo \"Database is unavailable - sleeping\"
          sleep 1
        done
        cp /key_registry_shared/keys.yaml /var/lib/splinter && \
        if [ ! -f /etc/splinter/certs/private/server.key ]
        then
          splinter-cli cert generate --force
        fi && \
        splinter database migrate -C postgres://admin:admin@splinter-db-gamma:5432/splinter && \
        splinterd -vv \
        --registry file:///configs/nodes.yaml \
        --bind 0.0.0.0:8085 \
        --network-endpoint 0.0.0.0:8044 \
        --node-id gamma-node-000 \
        --service-endpoint 0.0.0.0:8043 \
        --storage yaml \
        --client-cert /etc/splinter/certs/client.crt \
        --client-key /etc/splinter/certs/private/client.key \
        --server-cert /etc/splinter/certs/server.crt \
        --server-key /etc/splinter/certs/private/server.key \
        --enable-biome \
        --database postgres://admin:admin@splinter-db-gamma:5432/splinter \
        --insecure
      "

  splinter-db-gamma:
    image: postgres
    container_name: splinter-db-gamma
    restart: always
    expose:
      - 5432
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: splinter

  dgc-platform-ui-gamma:
    build:
      context: ../../dgc-platform-ui
      args:
        REPO_VERSION: ${REPO_VERSION}
        REACT_APP_SPLINTER_URL: '/splinterd'
        REACT_APP_SAPLING_URL: '/sapling-dev-server'
        REACT_APP_GRID_URL: '/gridd'
        SPLINTER_URL: 'http://splinterd-gamma:8085'
        SAPLING_URL: ' http://sapling-dev-server-gamma:80'
        GRID_URL: 'http://gridd-gamma:8080'
    image: dgc-platform-ui-gamma
    container_name: dgc-platform-ui-gamma
    expose:
      - 80
    ports:
      - '3032:80'

  sapling-dev-server-gamma:
    build:
      context: ../../dgc-platform-ui
      dockerfile: sapling-dev-server/Dockerfile
    container_name: sapling-dev-server-gamma
    expose:
      - 80
