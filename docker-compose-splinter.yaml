# Copyright (c) The dgc.network
# SPDX-License-Identifier: Apache-2.0

version: '3.6'

volumes:
  contracts-shared:
  splinter-shared:

services:
  dgc-platform-daemon:
    image: dgc-platform-daemon
    container_name: dgc-platform-daemon
    build:
      context: .
      dockerfile: daemon/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
        - CARGO_ARGS=${CARGO_ARGS}
    expose:
      - 8080
    ports:
      - '8080:8080'
    entrypoint: |
        bash -c "
          # we need to wait for the db to have started.
          until PGPASSWORD=grid_example psql -h db -U dgc-platform -c '\q'; do
              >&2 echo \"Database is unavailable - sleeping\"
              sleep 1
          done
          dgc-platform -vv database migrate \
              --database-url postgres://dgc-platform:grid_example@db/dgc-platform &&
          dgc-platform-daemon -vv -b dgc-platform-daemon:8080 -C splinter:http://splinterd:8085 \
              --database-url postgres://dgc-platform:grid_example@db/dgc-platform
        "

  pike-contract-builder:
    image: pike-contract-builder
    container_name: pike-contract-builder
    build:
      context: .
      dockerfile: contracts/pike/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/dgc-platform-pike*.scar /usr/share/scar
      "

  product-contract-builder:
    image: product-contract-builder
    container_name: product-contract-builder
    build:
      context: .
      dockerfile: contracts/product/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/dgc-platform-product*.scar /usr/share/scar
      "

  schema-contract-builder:
    image: schema-contract-builder
    container_name: schema-contract-builder
    build:
      context: .
      dockerfile: contracts/schema/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/dgc-platform-schema*.scar /usr/share/scar
      "

  tnt-contract-builder:
    image: tnt-contract-builder
    container_name: tnt-contract-builder
    build:
      context: .
      dockerfile: contracts/track_and_trace/Dockerfile
      args:
        - REPO_VERSION=${REPO_VERSION}
    volumes:
      - contracts-shared:/usr/share/scar
    entrypoint: |
      bash -c "
        cp /tmp/dgc-platform-track-and-trace*.scar /usr/share/scar
      "

  db:
    image: postgres
    container_name: db
    restart: always
    expose:
      - 5432
    ports:
        - "5432:5432"
    environment:
      POSTGRES_USER: dgc-platform
      POSTGRES_PASSWORD: grid_example
      POSTGRES_DB: dgc-platform

  splinter-cli:
    image: splintercommunity/splinter-cli:latest
    container_name: splinter-cli
    volumes:
      - splinter-shared:/splinter_shared
    command: |
      bash -c "
        if [ ! -f /splinter_shared/private/server.key ]
        then
          splinter-cli cert generate \
            -d  /splinter_shared/ \
            --force
        fi
      "

  splinterd:
    image: splintercommunity/splinterd:latest
    container_name: splinterd
    volumes:
      - contracts-shared:/usr/share/scar
      - splinter-shared:/splinter_shared
    entrypoint: |
      bash -c "
        while [ ! -f /splinter_shared/private/server.key ]; do \
          echo 'waiting for certs and keys'; \
          sleep 1; \
        done && \
        # Copy the generated keys and certificates to its expected location
        cp -a /splinter_shared/. /etc/splinter/certs && \
        mv /etc/splinter/nodes.yaml.example /etc/splinter/nodes.yaml && \
        splinterd -vv \
        --registry-backend FILE \
        --registry-file /etc/splinter/nodes.yaml \
        --bind 0.0.0.0:8085 \
        --network-endpoint 0.0.0.0:8044 \
        --node-id splinter-node \
        --service-endpoint 0.0.0.0:8043 \
        --storage yaml \
        --client-cert /etc/splinter/certs/client.crt \
        --client-key /etc/splinter/certs/private/client.key \
        --server-cert /etc/splinter/certs/server.crt \
        --server-key /etc/splinter/certs/private/server.key \
        --insecure
      "
