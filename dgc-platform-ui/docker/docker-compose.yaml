# Copyright (c) The dgc.network
# SPDX-License-Identifier: Apache-2.0

  version: '3.6'

  volumes:
    contracts:
    key-registry:
    dgc-platform-daemon:

  services:

    pike-contract-builder:
      image: pike-contract-builder
      container_name: pike-contract-builder
      build:
        context: ../..
        dockerfile: contracts/pike/Dockerfile
        args:
          - REPO_VERSION=${REPO_VERSION}
      volumes:
        - contracts:/usr/share/scar
      entrypoint: |
        bash -c "
          cp /tmp/dgc-platform-pike*.scar /usr/share/scar
        "

    product-contract-builder:
      image: product-contract-builder
      container_name: product-contract-builder
      build:
        context: ../..
        dockerfile: contracts/product/Dockerfile
        args:
          - REPO_VERSION=${REPO_VERSION}
      volumes:
        - contracts:/usr/share/scar
      entrypoint: |
        bash -c "
          cp /tmp/dgc-platform-product*.scar /usr/share/scar
        "

    schema-contract-builder:
      image: schema-contract-builder
      container_name: schema-contract-builder
      build:
        context: ../..
        dockerfile: contracts/schema/Dockerfile
        args:
          - REPO_VERSION=${REPO_VERSION}
      volumes:
        - contracts:/usr/share/scar
      entrypoint: |
        bash -c "
          cp /tmp/dgc-platform-schema*.scar /usr/share/scar
        "

    tnt-contract-builder:
      image: tnt-contract-builder
      container_name: tnt-contract-builder
      build:
        context: ../..
        dockerfile: contracts/track_and_trace/Dockerfile
        args:
          - REPO_VERSION=${REPO_VERSION}
      volumes:
        - contracts:/usr/share/scar
      entrypoint: |
        bash -c "
          cp /tmp/dgc-platform-track-and-trace*.scar /usr/share/scar
        "

    generate-key-registry:
      image: splintercommunity/splinter-cli:master
      volumes:
        - key-registry:/key_registry
        - ../../examples/splinter/configs:/input
      command: |
        bash -c "
          if [ ! -f /key_registry/keys.yaml ]
          then
            splinter admin keyregistry \
              -i /input/key_registry_spec.yaml \
              -d /key_registry \
              --force
          fi
        "

    dgc-platform-db:
      image: postgres
      container_name: dgc-platform-db
      hostname: dgc-platform-db
      restart: always
      expose:
        - 5432
      environment:
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: admin
        POSTGRES_DB: dgc-platform

    dgc-platform-daemon:
      image: dgc-platform-daemon
      container_name: dgc-platform-daemon
      hostname: dgc-platform-daemon
      build:
        context: ../..
        dockerfile: daemon/Dockerfile
        args:
          - REPO_VERSION=${REPO_VERSION}
          - CARGO_ARGS=-- --features experimental
      volumes:
        - contracts:/usr/share/scar
        - dgc-platform-daemon:/etc/dgc-platform/keys
      expose:
        - 8080
      ports:
        - "8080:8080"
      environment:
        DGC_PLATFORM_DAEMON_KEY: "alpha-agent"
        DGC_PLATFORM_DAEMON_ENDPOINT: "http://dgc-platform-daemon:8080"
        DGC_PLATFORM_SERVICE_ID: "my-dgc-platform-circuit::dgc-platform-scabbard-a"
      entrypoint: |
          bash -c "
            # we need to wait for the db to have started.
            until PGPASSWORD=admin psql -h dgc-platform-db -U admin -d dgc-platform -c '\q' > /dev/null 2>&1; do
                >&2 echo \"Database is unavailable - sleeping\"
                sleep 1
            done
            dgc-platform -vv admin keygen --skip && \
            dgc-platform -vv database migrate \
                --database-url postgres://admin:admin@dgc-platform-db/dgc-platform &&
            dgc-platform-daemon -vv -b 0.0.0.0:8080 -C splinter:http://splinterd:8085 \
                --database-url postgres://admin:admin@dgc-platform-db/dgc-platform
          "

    scabbard-cli:
      image: splintercommunity/scabbard-cli:experimental
      container_name: scabbard-cli
      hostname: scabbard-cli
      volumes:
        - dgc-platform-daemon:/root/.splinter/keys

    splinterd:
      image: splintercommunity/splinterd:experimental
      container_name: splinterd
      hostname: splinterd
      expose:
        - 8044
        - 8085
      ports:
        - "8044:8044"
        - "8085:8085"
      volumes:
        - contracts:/usr/share/scar
        - key-registry:/key_registry
        - ./configs:/configs
      entrypoint: |
        bash -c "
          while [ ! -f /key_registry/keys.yaml ]; do \
            echo 'waiting for key registry'; \
            sleep 1; \
          done && \
          until PGPASSWORD=admin psql -h splinter-db -U admin -d splinter -c '\q'; do
            >&2 echo \"Database is unavailable - sleeping\"
            sleep 1
          done
          cp /key_registry/keys.yaml /var/lib/splinter && \
          if [ ! -f /etc/splinter/certs/private/server.key ]
          then
            splinter-cli cert generate --force
          fi && \
          splinter database migrate -C postgres://admin:admin@splinter-db:5432/splinter && \
          splinterd -vv \
          --registry-backend FILE \
          --registry-file /configs/nodes.yaml \
          --bind 0.0.0.0:8085 \
          --network-endpoint 0.0.0.0:8044 \
          --node-id alpha-node-000 \
          --service-endpoint 0.0.0.0:8043 \
          --storage yaml \
          --client-cert /etc/splinter/certs/client.crt \
          --client-key /etc/splinter/certs/private/client.key \
          --server-cert /etc/splinter/certs/server.crt \
          --server-key /etc/splinter/certs/private/server.key \
          --enable-biome \
          --database postgres://admin:admin@splinter-db:5432/splinter \
          --insecure
        "

    splinter-db:
      image: postgres
      container_name: splinter-db
      restart: always
      expose:
        - 5432
      environment:
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: admin
        POSTGRES_DB: splinter

    dgc-platform-ui:
      build:
        context: ..
        args:
          REPO_VERSION: ${REPO_VERSION}
          REACT_APP_SPLINTER_URL: '/splinterd'
          REACT_APP_SAPLING_URL: '/sapling-dev-server'
          SPLINTER_URL: 'http://splinterd:8085'
          SAPLING_URL: ' http://sapling-dev-server:80'
      image: dgc-platform-ui
      container_name: dgc-platform-ui
      expose:
        - 80
      ports:
        - '3030:80'

    sapling-dev-server:
      build:
        context: ..
        dockerfile: sapling-dev-server/Dockerfile
      container_name: sapling-dev-server
      expose:
        - 80
