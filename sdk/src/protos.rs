// Copyright (c) The dgc.network
// SPDX-License-Identifier: Apache-2.0

use std::error::Error as StdError;

#[derive(Debug)]
pub enum ProtoConversionError {
    SerializationError(String),
    InvalidTypeError(String),
}

impl StdError for ProtoConversionError {
    fn description(&self) -> &str {
        match *self {
            ProtoConversionError::SerializationError(ref msg) => msg,
            ProtoConversionError::InvalidTypeError(ref msg) => msg,
        }
    }

    fn cause(&self) -> Option<&dyn StdError> {
        match *self {
            ProtoConversionError::SerializationError(_) => None,
            ProtoConversionError::InvalidTypeError(_) => None,
        }
    }
}

impl std::fmt::Display for ProtoConversionError {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match *self {
            ProtoConversionError::SerializationError(ref s) => {
                write!(f, "SerializationError: {}", s)
            }
            ProtoConversionError::InvalidTypeError(ref s) => write!(f, "InvalidTypeError: {}", s),
        }
    }
}

pub trait FromProto<P>: Sized {
    fn from_proto(other: P) -> Result<Self, ProtoConversionError>;
}

pub trait FromNative<N>: Sized {
    fn from_native(other: N) -> Result<Self, ProtoConversionError>;
}

pub trait FromBytes<N>: Sized {
    fn from_bytes(bytes: &[u8]) -> Result<N, ProtoConversionError>;
}

pub trait IntoBytes: Sized {
    fn into_bytes(self) -> Result<Vec<u8>, ProtoConversionError>;
}

pub trait IntoNative<T>: Sized
where
    T: FromProto<Self>,
{
    fn into_native(self) -> Result<T, ProtoConversionError> {
        FromProto::from_proto(self)
    }
}

pub trait IntoProto<T>: Sized
where
    T: FromNative<Self>,
{
    fn into_proto(self) -> Result<T, ProtoConversionError> {
        FromNative::from_native(self)
    }
}

// Includes the autogenerated protobuf messages
include!(concat!(env!("OUT_DIR"), "/protos/mod.rs"));
